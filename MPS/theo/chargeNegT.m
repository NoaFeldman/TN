function res = chargeNegT(t, a, fixed)
    l = fixed(1);
    n = fixed(2);
    K = fixed(3);
    L = fixed(4);
    Q = fixed(5);
    epsilon = abs(a(1));
    nuc = a(2);
    wpm2 = real(a(3));
    wpm3 = real(a(4));
    w0 = 1;
    [w11t, w22t, w33t, w12, w12t, w23, w23t, w13, w13t] = wDiffs(l, t, epsilon, L);
    dw1 = wDerivative(l, t, epsilon, L);
    dw2 = wDerivative(0, t, epsilon, L);
    dw3 = wDerivative(-l, t, epsilon, L);
    a(2) = abs(a(2));
    order2 = 0;
    for i = 1:6
        curr = ...
            sndOrderIntegral(K / n .* log((nuc .* w11t).^(-2/2) .* (dw1).^(2/2)), ...
                             K / n .* log((nuc .* w22t).^(-2/2) .* (dw2).^(2/2)), ...
                             K / n .* log((nuc .* w33t).^(-2/2) .* (dw3).^(2/2)), ...
                             K / n .* log((nuc .* w12).^2 .* (nuc .* w12t).^(-2)), ...
                             K / n .* log((nuc .* w13).^2 .* (nuc .* w13t).^(-2)), ...
                             K / n .* log((nuc .* w23).^2 .* (nuc .* w23t).^(-2)), ...
                             (i == 1) - (i == 4), (i == 2) - (i == 5), (i == 3) - (i == 6), Q);
        % For alpha2, we consider V2 = V(-alpha)^2, and only
        % one of the operators gets the shift, so we get a
        % combinatoric factor of 2.
        if i == 2 || i == 5
            order2 = order2 + 2 * wpm2 .* curr;
        else
            order2 = order2 + wpm2 .* curr;
        end
    end
    
    order3 = 0;
    for i = 1:6
        for j = 1:6
            if (i ~= j && abs(i - j) ~= 3)
                curr = ...
                    sndOrderIntegral(K / n .* log((nuc .* w11t).^(-2/2) .* (dw1).^(2/2)), ...
                             K / n .* log((nuc .* w22t).^(-2/2) .* (dw2).^(2/2)), ...
                             K / n .* log((nuc .* w33t).^(-2/2) .* (dw3).^(2/2)), ...
                             K / n .* log((nuc .* w12).^2 .* (nuc .* w12t).^(-2)), ...
                             K / n .* log((nuc .* w13).^2 .* (nuc .* w13t).^(-2)), ...
                             K / n .* log((nuc .* w23).^2 .* (nuc .* w23t).^(-2)), ...
                             (i == 1) - (i == 4) + (j == 1) - (j == 4), ...
                             (i == 2) - (i == 5) + (j == 2) - (j == 5), ...
                             (i == 3) - (i == 6) + (j == 3) - (j == 6), Q);
                combFactor = 1;
                if i == 2 || i == 5
                    combFactor = combFactor * 2;
                end
                if j == 2 || j == 5
                    combFactor = combFactor * 2;                
                end
                order3 = order3 + combFactor .* wpm2^2 .* curr;
            end
        end
    end    
    for i = 1:6
        curr = ...
            sndOrderIntegral(K / n .* log((nuc .* w11t).^(-2/2) .* (dw1).^(2/2)), ...
                             K / n .* log((nuc .* w22t).^(-2/2) .* (dw2).^(2/2)), ...
                             K / n .* log((nuc .* w33t).^(-2/2) .* (dw3).^(2/2)), ...
                             K / n .* log((nuc .* w12).^2 .* (nuc .* w12t).^(-2)), ...
                             K / n .* log((nuc .* w13).^2 .* (nuc .* w13t).^(-2)), ...
                             K / n .* log((nuc .* w23).^2 .* (nuc .* w23t).^(-2)), ...
                             2*((i == 1) - (i == 4)), 2*((i == 2) - (i == 5)), 2*((i == 3) - (i == 6)), Q);
        combFactor = 1;
        if i == 2 || i == 5
            combFactor = combFactor * 2;
        end
        order3 = order3 + combFactor .* wpm3 .* curr;
    end
    
    order4 = 0;
    for i = 1:6
        for j = 1:6
            for k = 1:6
                if (i ~= j && abs(i - j) ~= 3 && i ~= k && abs(i - k) ~= 3 && k ~= j && abs(k - j) ~= 3)
                    curr = ...
                        sndOrderIntegral(K / n .* log((nuc .* w11t).^(-2/2) .* (dw1).^(2/2)), ...
                             K / n .* log((nuc .* w22t).^(-2/2) .* (dw2).^(2/2)), ...
                             K / n .* log((nuc .* w33t).^(-2/2) .* (dw3).^(2/2)), ...
                             K / n .* log((nuc .* w12).^2 .* (nuc .* w12t).^(-2)), ...
                             K / n .* log((nuc .* w13).^2 .* (nuc .* w13t).^(-2)), ...
                             K / n .* log((nuc .* w23).^2 .* (nuc .* w23t).^(-2)), ...
                             (i == 1) - (i == 4) + (j == 1) - (j == 4) + (k == 1) - (k == 4), ...
                             (i == 2) - (i == 5) + (j == 2) - (j == 5) + (k == 2) - (k == 5), ...
                             (i == 3) - (i == 6) + (j == 3) - (j == 6) + (k == 3) - (k == 6), Q);
                    combFactor = 1;
                    if i == 2 || i == 5
                        combFactor = combFactor * 2;
                    end
                    if j == 2 || j == 5
                        combFactor = combFactor * 2;                
                    end
                    if k == 2 || k == 5
                        combFactor = combFactor * 2;                
                    end
                    order4 = order4 + combFactor .* wpm2^3 .* curr;
                end
            end
        end
    end
    
    for i = 1:6
        for j = 1:6
            if (i ~= j && abs(i - j) ~= 3)
                curr = ...
                    sndOrderIntegral(K / n .* log((nuc .* w11t).^(-2/2) .* (dw1).^(2/2)), ...
                             K / n .* log((nuc .* w22t).^(-2/2) .* (dw2).^(2/2)), ...
                             K / n .* log((nuc .* w33t).^(-2/2) .* (dw3).^(2/2)), ...
                             K / n .* log((nuc .* w12).^2 .* (nuc .* w12t).^(-2)), ...
                             K / n .* log((nuc .* w13).^2 .* (nuc .* w13t).^(-2)), ...
                             K / n .* log((nuc .* w23).^2 .* (nuc .* w23t).^(-2)), ...
                             (i == 1) - (i == 4) + 2*((j == 1) - (j == 4)), ...
                             (i == 2) - (i == 5) + 2*((j == 2) - (j == 5)), ...
                             (i == 3) - (i == 6) + 2*((j == 3) - (j == 6)), Q);
                combFactor = 1;
                if i == 2 || i == 5
                    combFactor = combFactor * 2;
                end
                if j == 2 || j == 5
                    combFactor = combFactor * 2;                
                end
                order4 = order4 + combFactor .* wpm2*wpm3 .* curr;
            end
        end
    end
    
    
    res = w0 .* (fstOrderIntegral(K / n .* log((nuc .* w11t).^(-2/2) .* (dw1).^(2/2)), ...
                                 K / n .* log((nuc .* w22t).^(-2/2) .* (dw2).^(2/2)), ...
                                 K / n .* log((nuc .* w33t).^(-2/2) .* (dw3).^(2/2)), ...
                                 K / n .* log((nuc .* w12).^2 .* (nuc .* w12t).^(-2)), ...
                                 K / n .* log((nuc .* w13).^2 .* (nuc .* w13t).^(-2)), ...
                                 K / n .* log((nuc .* w23).^2 .* (nuc .* w23t).^(-2)), ...
                                 Q) + order2 + order3 + order4);
end

function res =fstOrderIntegral(s11, s22, s33, s12, s13, s23, Q)
res = (1/2).*exp(1).^(pi.^2.*Q.^2.*(s11+(-2).*s12+s13+4.*s22+(-2).*s23+ ...
    s33).^(-1)).*pi.^(1/2).*(s11+(-2).*s12+s13+4.*s22+(-2).*s23+s33) ...
    .^(-1/2).*(erfi((1/2).*(s11+(-2).*s12+s13+4.*s22+(-2).*s23+s33).^( ...
    -1/2).*((sqrt(-1)*(-2)).*pi.*Q+s11+(-2).*s12+s13+4.*s22+(-2).*s23+ ...
    s33))+erfi((1/2).*(s11+(-2).*s12+s13+4.*s22+(-2).*s23+s33).^(-1/2) ...
    .*((sqrt(-1)*2).*pi.*Q+s11+(-2).*s12+s13+4.*s22+(-2).*s23+s33))); ...
end

function res = sndOrderIntegral(s11, s22, s33, s12, s13, s23, a1, a2, a3, Q)
      res = (-1/2).*exp(1).^((-1/4).*(s11+(-2).*s12+s13+4.*s22+(-2).*s23+s33) ...
          .^(-1).*((-4).*pi.^2.*Q.^2+a2.^2.*s12.^2+2.*a2.*a3.*s12.*s13+ ...
          a3.^2.*s13.^2+(-4).*a2.^2.*s11.*s22+(-4).*a2.^2.*s13.*s22+(-8).* ...
          a2.*a3.*s13.*s22+(-4).*a2.*a3.*s11.*s23+2.*a2.^2.*s12.*s23+4.*a2.* ...
          a3.*s12.*s23+(-2).*a2.*a3.*s13.*s23+(-4).*a3.^2.*s13.*s23+a2.^2.* ...
          s23.^2+4.*a2.*a3.*s23.^2+4.*a3.^2.*s23.^2+(-4).*a3.^2.*s11.*s33+ ...
          4.*a2.*a3.*s12.*s33+8.*a3.^2.*s12.*s33+(-4).*a2.^2.*s22.*s33+(-16) ...
          .*a2.*a3.*s22.*s33+(-16).*a3.^2.*s22.*s33+a1.^2.*(4.*s12.^2+(-4).* ...
          s12.*s13+s13.^2+(-4).*s11.*(4.*s22+(-2).*s23+s33))+(sqrt(-1)*(-4)) ...
          .*pi.*Q.*(a1.*(2.*s11+(-2).*s12+s13)+a2.*(s12+(-4).*s22+s23)+a3.*( ...
          s13+(-2).*s23+2.*s33))+2.*a1.*(a3.*((-1).*s13.^2+(-8).*s13.*s22+( ...
          -4).*s11.*s23+2.*s13.*s23+2.*s12.*(s13+2.*s23+(-2).*s33)+4.*s11.* ...
          s33)+a2.*(2.*s12.^2+(-1).*(2.*s11+s13).*(4.*s22+(-1).*s23)+(-1).* ...
          s12.*(s13+(-2).*s23+2.*s33))))).*pi.^(1/2).*(s11+(-2).*s12+s13+4.* ...
          s22+(-2).*s23+s33).^(-1/2).*erfi((1/2).*(s11+(-2).*s12+s13+4.*s22+ ...
          (-2).*s23+s33).^(-1/2).*((sqrt(-1)*(-2)).*pi.*Q+(-1).*s11+2.*s12+ ...
          a2.*s12+(-1).*s13+a3.*s13+a1.*(2.*s11+(-2).*s12+s13)+(-4).*s22+( ...
          -4).*a2.*s22+2.*s23+a2.*s23+(-2).*a3.*s23+(-1).*s33+2.*a3.*s33))+( ...
          1/2).*exp(1).^((-1/4).*(s11+(-2).*s12+s13+4.*s22+(-2).*s23+s33).^( ...
          -1).*((-4).*pi.^2.*Q.^2+a2.^2.*s12.^2+2.*a2.*a3.*s12.*s13+a3.^2.* ...
          s13.^2+(-4).*a2.^2.*s11.*s22+(-4).*a2.^2.*s13.*s22+(-8).*a2.*a3.* ...
          s13.*s22+(-4).*a2.*a3.*s11.*s23+2.*a2.^2.*s12.*s23+4.*a2.*a3.* ...
          s12.*s23+(-2).*a2.*a3.*s13.*s23+(-4).*a3.^2.*s13.*s23+a2.^2.* ...
          s23.^2+4.*a2.*a3.*s23.^2+4.*a3.^2.*s23.^2+(-4).*a3.^2.*s11.*s33+ ...
          4.*a2.*a3.*s12.*s33+8.*a3.^2.*s12.*s33+(-4).*a2.^2.*s22.*s33+(-16) ...
          .*a2.*a3.*s22.*s33+(-16).*a3.^2.*s22.*s33+a1.^2.*(4.*s12.^2+(-4).* ...
          s12.*s13+s13.^2+(-4).*s11.*(4.*s22+(-2).*s23+s33))+(sqrt(-1)*(-4)) ...
          .*pi.*Q.*(a1.*(2.*s11+(-2).*s12+s13)+a2.*(s12+(-4).*s22+s23)+a3.*( ...
          s13+(-2).*s23+2.*s33))+2.*a1.*(a3.*((-1).*s13.^2+(-8).*s13.*s22+( ...
          -4).*s11.*s23+2.*s13.*s23+2.*s12.*(s13+2.*s23+(-2).*s33)+4.*s11.* ...
          s33)+a2.*(2.*s12.^2+(-1).*(2.*s11+s13).*(4.*s22+(-1).*s23)+(-1).* ...
          s12.*(s13+(-2).*s23+2.*s33))))).*pi.^(1/2).*(s11+(-2).*s12+s13+4.* ...
          s22+(-2).*s23+s33).^(-1/2).*erfi((1/2).*(s11+(-2).*s12+s13+4.*s22+ ...
          (-2).*s23+s33).^(-1/2).*((sqrt(-1)*(-2)).*pi.*Q+s11+(-2).*s12+a2.* ...
          s12+s13+a3.*s13+a1.*(2.*s11+(-2).*s12+s13)+4.*s22+(-4).*a2.*s22+( ...
          -2).*s23+a2.*s23+(-2).*a3.*s23+s33+2.*a3.*s33));
end