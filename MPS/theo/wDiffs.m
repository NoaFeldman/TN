function [w11t, w22t, w33t, w12, w12t, w23, w23t, w13, w13t] = wDiffs(l, t, epsilon, L)
%     % Analytically continued |omega_i - omega_j|, based on analytical calcs
%     % and WCR.
%     w11t = abs(2/epsilon .* (l + rhoCosTheta(l, t, epsilon)));
%     w22t = 2/epsilon .* sqrt(epsilon^2 + t.^2);
%     w33t = abs(2/epsilon .* abs(-l + rhoCosTheta(-l, t, epsilon)));
%     w12  = abs(1/epsilon .* sqrt((l + rhoCosTheta(l, t, epsilon) - sqrt(epsilon^2 + t.^2)).^2 + rhoSinTheta(l, t, epsilon).^2));
%     w12t = abs(1/epsilon .* sqrt((l + rhoCosTheta(l, t, epsilon) + sqrt(epsilon^2 + t.^2)).^2 + rhoSinTheta(l, t, epsilon).^2));
%     w23  = abs(1/epsilon .* sqrt((-l + rhoCosTheta(-l, t, epsilon) - sqrt(epsilon^2 + t.^2)).^2 + rhoSinTheta(-l, t, epsilon).^2));
%     w23t = abs(1/epsilon .* sqrt((-l + rhoCosTheta(-l, t, epsilon) + sqrt(epsilon^2 + t.^2)).^2 + rhoSinTheta(-l, t, epsilon).^2));
%     w13  = abs(1/epsilon .* sqrt((2*l + rhoCosTheta(l, t, epsilon) - rhoCosTheta(-l, t, epsilon)).^2 + (rhoSinTheta(l, t, epsilon) - rhoSinTheta(-l, t, epsilon)).^2));
%     w13t  = abs(1/epsilon .* sqrt((2*l + rhoCosTheta(l, t, epsilon) + rhoCosTheta(-l, t, epsilon)).^2 + (rhoSinTheta(l, t, epsilon) + rhoSinTheta(-l, t, epsilon)).^2));
    % based on SD_neg.nb
    vF = 2;
    theta = 1i .* vF .* t;
    w11t = getW11t(l, theta, epsilon, L);
    w22t = getW22t(l, theta, epsilon, L);
    w33t = getW33t(l, theta, epsilon, L);
    w12  = abs(getWi2(-l, theta, epsilon, L));
    w12t = abs(getWi2t(-l, theta, epsilon, L));
    w23  = abs(getWi2(l, theta, epsilon, L));
    w23t = abs(getWi2t(l, theta, epsilon, L));
    w13  = abs(getW13(l, theta, epsilon, L));
    w13t = abs(getW13t(l, theta, epsilon, L));
end

function wi2t = getWi2t(l, theta, epsilon, L)
    wi2t = 2.*...
        (1+(-1).*csch(L.^(-1).*pi.*((-1).* ...
        epsilon+theta)).*sinh(L.^(-1).*pi.*(epsilon+theta))).^(-1/2).*(( ...
        -1)+(csch(L.^(-1).*pi.*((-1).*epsilon+sqrt(-1).*l+theta)).*sinh( ...
        L.^(-1).*pi.*(epsilon+sqrt(-1).*l+theta))).^(1/2)).^(-1).*(sqrt( ...
        -1).*((-1).*csch(L.^(-1).*pi.*((-1).*epsilon+theta)).*sinh(L.^(-1) ...
        .*pi.*(epsilon+theta))).^(1/2)+(csch(L.^(-1).*pi.*((-1).*epsilon+ ...
        sqrt(-1).*l+theta)).*sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).*l+theta) ...
        )).^(1/2));    
%         Sign((-1)+(csch(L.^(-1).*pi.*((-1).*epsilon+sqrt(-1).*l+theta)) ...
%         .*sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).*l+theta))).^(1/2)).*...
%         Sign(sqrt(-1).*((-1).*csch(L.^(-1).*pi.*((-1).*epsilon+theta)).*sinh( ...
%         L.^(-1).*pi.*(epsilon+theta))).^(1/2)+(csch(L.^(-1).*pi.*((-1).* ...
%         epsilon+sqrt(-1).*l+theta)).*sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).* ...
%         l+theta))).^(1/2)).^(-1).*...
end

function wi2 = getWi2(l, theta, epsilon, L)
    wi2 = 2.*...
        ((-1)+(csch(L.^(-1).* ...
        pi.*((-1).*epsilon+theta)).*sinh(L.^(-1).*pi.*(epsilon+theta))).^( ...
        1/2)).^(-1).*((csch(L.^(-1).*pi.*((-1).*epsilon+theta)).*sinh(L.^( ...
        -1).*pi.*(epsilon+theta))).^(1/2)+(-1).*(csch(L.^(-1).*pi.*((-1).* ...
        epsilon+sqrt(-1).*l+theta)).*sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).* ...
        l+theta))).^(1/2)).*((-1)+(csch(L.^(-1).*pi.*((-1).*epsilon+sqrt( ...
        -1).*l+theta)).*sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).*l+theta))).^( ...
        1/2)).^(-1);
%         Sign((-1)+(csch(L.^(-1).*pi.*((-1).*epsilon+theta)).*sinh(L.^( ...
%         -1).*pi.*(epsilon+theta))).^(1/2)).*...
%         Sign((csch(L.^(-1).*pi.*((-1) ...
%         .*epsilon+theta)).*sinh(L.^(-1).*pi.*(epsilon+theta))).^(1/2)+(-1) ...
%         .*(csch(L.^(-1).*pi.*((-1).*epsilon+sqrt(-1).*l+theta)).*sinh(L.^( ...
%         -1).*pi.*(epsilon+sqrt(-1).*l+theta))).^(1/2)).^(-1).*...
%         Sign((-1)+( ...
%         csch(L.^(-1).*pi.*((-1).*epsilon+sqrt(-1).*l+theta)).*sinh(L.^(-1) ...
%         .*pi.*(epsilon+sqrt(-1).*l+theta))).^(1/2)).*...
end

function w13 = getW13(l, theta, epsilon, L)
    w13 = 2.*...
        ((-1)+(csch(L.^(-1).*pi.*((-1).*epsilon+(sqrt(-1)*(-1)).*l+theta)).*sinh( ...
        L.^(-1).*pi.*(epsilon+(sqrt(-1)*(-1)).*l+theta))).^(1/2)).^(-1).*( ...
        (csch(L.^(-1).*pi.*((-1).*epsilon+(sqrt(-1)*(-1)).*l+theta)).* ...
        sinh(L.^(-1).*pi.*(epsilon+(sqrt(-1)*(-1)).*l+theta))).^(1/2)+(-1) ...
        .*(csch(L.^(-1).*pi.*((-1).*epsilon+sqrt(-1).*l+theta)).*sinh(L.^( ...
        -1).*pi.*(epsilon+sqrt(-1).*l+theta))).^(1/2)).*((-1)+(csch(L.^( ...
        -1).*pi.*((-1).*epsilon+sqrt(-1).*l+theta)).*sinh(L.^(-1).*pi.*( ...
        epsilon+sqrt(-1).*l+theta))).^(1/2)).^(-1);
%         Sign((-1)+(csch(L.^(-1).*pi.*((-1).*epsilon+(sqrt(-1)*(-1)).*l+ ...
%         theta)).*sinh(L.^(-1).*pi.*(epsilon+(sqrt(-1)*(-1)).*l+theta))).^( ...
%         1/2))...
%         .*Sign((csch(L.^(-1).*pi.*((-1).*epsilon+(sqrt(-1)*(-1)).*l+ ...
%         theta)).*sinh(L.^(-1).*pi.*(epsilon+(sqrt(-1)*(-1)).*l+theta))).^( ...
%         1/2)+(-1).*(csch(L.^(-1).*pi.*((-1).*epsilon+sqrt(-1).*l+theta)).* ...
%         sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).*l+theta))).^(1/2)).^(-1)...
%         .* Sign((-1)+(csch(L.^(-1).*pi.*((-1).*epsilon+sqrt(-1).*l+theta)).* ...
%         sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).*l+theta))).^(1/2)).*...
end

function w11t = getW11t(l, theta, epsilon, L)
    w11t = -getWiit(-l, theta, epsilon, L);
end

function w33t = getW33t(l, theta, epsilon, L)
    w33t = getWiit(l, theta, epsilon, L);
end

function w22t = getW22t(l, theta, epsilon, L)
    w22t = (-2).*((-1).*csch(L.^(-1).*pi.*((-1).*epsilon+theta)).*sinh(L.^( ...
        -1).*pi.*(epsilon+theta))).^(1/2).*((-1)+coth(epsilon.*L.^(-1).* ...
        pi).*tanh(L.^(-1).*pi.*theta));
end

function wiit = getWiit(l, theta, epsilon, L)
    rSinh = realSinh(pi/L .* (epsilon + theta), pi/L * l);
    iSinh = imSinh(pi/L .* (epsilon + theta), pi/L * l);
    rCsch = realCsch(pi/L .* (theta - epsilon), pi/L * l);
    iCsch = imCsch(pi/L .* (theta - epsilon), pi/L * l);
    arg = getArg(rSinh .* rCsch - iSinh .* iCsch, rSinh .* iCsch + rCsch .* iSinh);
    wiit = 4.*(1+(-2).*cos((1/2).* arg).* ...
        ((cos(2.*l.*L.^(-1).*pi)+(-1).*cosh(2.*L.^(-1).*pi.*(epsilon+(-1) ...
        .*theta))).^(-1).*(cos(2.*l.*L.^(-1).*pi)+(-1).*cosh(2.*L.^(-1).* ...
        pi.*(epsilon+theta)))).^(1/4)+((cos(2.*l.*L.^(-1).*pi)+(-1).*cosh( ...
        2.*L.^(-1).*pi.*(epsilon+(-1).*theta))).^(-1).*(cos(2.*l.*L.^(-1) ...
        .*pi)+(-1).*cosh(2.*L.^(-1).*pi.*(epsilon+theta)))).^(1/2)).^(-1) ...
        .*((cos(2.*l.*L.^(-1).*pi)+(-1).*cosh(2.*L.^(-1).*pi.*(epsilon+( ...
        -1).*theta))).^(-1).*(cos(2.*l.*L.^(-1).*pi)+(-1).*cosh(2.*L.^(-1) ...
        .*pi.*(epsilon+theta)))).^(1/4).*sin((1/2).*arg);
end

function w13t = getW13t(l, theta, epsilon, L)
%     Conjugate((
%     csch(L.^(-1).*pi.*((-1).*epsilon+(sqrt(-1)*( ...
%     -1)).*l+theta)).*sinh(L.^(-1).*pi.*(epsilon+(sqrt(-1)*(-1)).*l+ ...
%     theta))
% ).^(1/2))...
    rSinh = realSinh(pi/L .* (epsilon + theta), -pi/L * l);
    iSinh = imSinh(pi/L .* (epsilon + theta), -pi/L * l);
    rCsch = realCsch(pi/L .* (theta - epsilon), -pi/L * l);
    iCsch = imCsch(pi/L .* (theta - epsilon), -pi/L * l);
    rProd = rSinh.*rCsch - iSinh.*iCsch;
    imProd = rSinh .* iCsch + iSinh .* rCsch;
    w13t = 2.*((-1)+...
        (realSqrt(rProd , imProd) - 1i .* imSqrt(rProd, imProd))...
        ).^(-1)+(-2).*((-1)+csch(L.^(-1).*pi.*((-1).* ...
        epsilon+sqrt(-1).*l+theta)).*sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).* ...
        l+theta))).^(-1)+(-2).*(csch(L.^(-1).*pi.*((-1).*epsilon+sqrt(-1) ...
        .*l+theta)).*sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).*l+theta))).^( ...
        1/2).*((-1)+csch(L.^(-1).*pi.*((-1).*epsilon+sqrt(-1).*l+theta)).* ...
        sinh(L.^(-1).*pi.*(epsilon+sqrt(-1).*l+theta))).^(-1);
end

function R = realSinh(re, im)
    R = cos(im) .* sinh(re);
end
function I = imSinh(re, im)
    I = -sin(im) .* cosh(re);
end
function R = realCsch(re, im)
    R = realSinh(re, im)./(realSinh(re, im).^2 + imSinh(re, im).^2);
end
function I = imCsch(re, im)
    I = -imSinh(re, im)./(realSinh(re, im).^2 + imSinh(re, im).^2);
end
function R = realSqrt(re , im)
    rho = sqrt(im.^2 + re.^2);
    arg = atan(im ./ re);
    R = sqrt(rho).*cos(arg./2);
end
function I = imSqrt(re , im)
    rho = sqrt(im.^2 + re.^2);
    arg = atan(im ./ re);
    I = sqrt(rho).*sin(arg./2);
end

% Analytical continuation for arg
function arg = getArg(re, im)
    arg = atan(im ./ re);
end