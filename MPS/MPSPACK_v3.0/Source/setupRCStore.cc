char USAGE[] =
/* ================================================================ */
"\n\
   Usage: [Ic]=setupRCStore(sym,fout)                              \n\
                                                                   \n\
       Setup CGC container for given symmetry,                     \n\
       with the data store in given file (and returned             \n\
       via the info structure Ic if specified).                    \n\
                                                                   \n\
   (C) Wb,Aug07,14                                                 \n";

// This is a MEX wrapper routine for MATLAB.
/* ================================================================ */

// see also getSymmetryStates.m (MatLab script)

#ifdef MATLAB_MEX_FILE
   #define PROG mexFunctionName()
#else
   #define PROG "setupRCStore"
#endif


#define LOAD_CGC_QSPACE
#include "wblib.h"


void mexFunction(
    int nargout, mxArray *argout[],
    int nargin, const mxArray *argin[]
){
   if (nargin && isHelpIndicator(argin[0])) { usage(); return; }

   if (nargout>3 || nargin<2){
       if (nargin || nargout) wblog(FL,"ERR invalid usage");
       else { usage(); return; }
   }

   QType q(FL,argin[0]);
   wbstring fout(FL,argin[1]);
   unsigned n, dmax=0; char vflag=0, load_data=0;
   const char *evar="CG_STORE";

   if (nargin>2) {
      OPTS opts; opts.init(argin+2, nargin-2);
      if (opts.getOpt("-v")) { vflag=1; CG_VERBOSE=1; } else
      if (opts.getOpt("-V")) { vflag=2; CG_VERBOSE=2; }
      opts.getOpt("dmax",dmax);
      load_data=opts.getOpt("--load-env");
      opts.checkAnyLeft();
   }

   if (vflag) printf("\n   setup of (defining) "
      "symmetry multiplets for %s ...\n",q.toStr().data);
   wbSigHandler SIG(FL);

   qset<gTQ> q0;
   gRG.getRSet(FL,q,&q0);

   printf(
   "   defining multiplet: q=[%s]\n\n", q0.toStr().data);

   if (load_data) {
      unsigned l=0, n=256;
      char svar[n];
      
      l=snprintf(svar,n,"%s_%s",evar,q.toStr('t').data);
      if (l>=n) wblog(FL,
         "ERR %s() string out of bounds (%d/%d)",FCT,l,n);

      const char *sval=getenv(svar);
      if (!sval) {
         sval=getenv(evar);
         if (!sval) wblog(FL,
            "ERR undefined environmental variable %s[_%s]",
            evar,q.toStr('t').data);

         l=snprintf(svar,n,"%s_%s.mat",sval,q.toStr('t').data);
         if (l>=n) wblog(FL,
            "ERR %s() string out of bounds (%d/%d)",FCT,l,n);
         sval=svar;
      }
      if (!Wb::fexist(sval,'f')) wblog(FL,
         "ERR invalid file %s",sval);
      printf("   loading data file %s (%s)\n\n",sval,
      Wb::size2Str(Wb::getFilesize(sval)).data);

      gRG.LoadStore(FL,sval);
      gCG.LoadStore(FL,sval);
   }

   unsigned n3, i=0;
   if (int(dmax)<=0) dmax=10*q.qlen();

   for (n=6; i<n; ++i) { if (vflag) {
      wblog(FL,"=== run %d %45R",i+1,"=");  }
      n3=gRG.buf[q].getTensorProdReps(dmax);
      if (int(n3)<=0) {
         wblog(FL,"no further new multiplets (dmax=%d)",dmax);
         break;
      }
      SIG.call99();
   }

   printf("\n"
   "   number of CGCs: %d (%d)\n",gCG.map3[q].size(),gCG.BUF.size());
   printf(
   "   number of multiplets: %d\n",gRG.buf[q].RSet.size());

   mxArray *a[]={NULL,NULL,NULL}; n=3;
   char toFile=(fout.data && fout.data[0]);

   if (toFile) {
      sprintf(str,"%s_%s.mat",fout.data,q.toStr('t').data);
      fout=str;
   }

   a[0]=gRG.toMx(q);

   if (toFile || nargout>1) {
      a[1]=gCG.toMx(q);
   }

   if (toFile || nargout>2) {
      a[2]=MXPut()
          .add(wbstring("data generated by setupRCStore"),"istr")
          .add(wbTimeStamp(),"tstamp").add(fout,"fout")
          .addP(MXPut()
                .add(getName(typeid(gTQ)),"gTQ")
                .add(getName(typeid(gTD)),"gTD")
                .add(getName(typeid(RTD)),"RTD")
             .toMx(),"dtype")
          .add(q.toStr('t'),"qtype").add(dmax,"dmax")
       .toMx();
   }

   if (toFile) {
      if (vflag) printf(
         "\n   saving data to output file: %s\n",fout.data);
      Wb::matFile F(FL,fout.data,"w");

      matPutVariable(F.mfp,"RStore",a[0]);
      matPutVariable(F.mfp,"CStore",a[1]);
      matPutVariable(F.mfp,"info",  a[2]);
   }

   for (i=0; i<n; ++i) {
      if (i<nargout || !i)
           { argout[i]=a[i]; }
      else { mxDestroyArray(a[i]); }
   }


};


